#include <bits/stdc++.h>
#include <iostream>
#include <utility>
using namespace std;

struct Node{

    int data;
    Node* next;

    Node(int val){
        data = val;
        next = NULL;
    }

};

// Convert array into LL

Node* ArraytoLL(vector <int> &arr){
    Node* head = new Node(arr[0]);
    Node* mover = head;
    for(int i =1; i<arr.size(); i++){
        Node* temp = new Node(arr[i]);     // Step 1 change the array to Linked List first
        mover->next = temp;
        mover = temp;

        
    }
    return head;

}


void print(Node* head){
    Node* temp =  head;
    while(temp != NULL){
        cout<<temp->data<<" ";
        temp = temp->next;
    }

    
}

Node* KthelementDelete(Node* head, int k){
    if(head == NULL) return head;
    if(k == 1){
        Node*temp = head;
        head = head->next;
        delete temp;
        return head;
         
    }

    int cnt = 0;
    Node* temp = head;
    Node* Prev = NULL;

    while(temp != NULL){
        cnt++;
        if(cnt == k){
            Prev->next = Prev->next->next;
           delete temp;
           break;

        }
        else{
            Prev = temp;
            temp = temp->next;
           
        }
    }

    return head;



}


// 2nd case instead of K element is given


Node* RemoveElement(Node* head, int elem){
    if(head == NULL) return head;
    if(head->data == elem){
        Node* temp = head;
        head = head->next;
        delete temp;
        return head;

    }

    Node* Prev = NULL;
    Node*temp = head;
   
    while(temp != NULL){
        if(temp->data ==  elem){
            Prev->next = Prev->next->next;
            delete temp;
            break;

        }else{
            Prev = temp;
            temp = temp->next;
        }
    }

    return head;
    
    
}

int main(){

    vector <int> arr = {1,2,3,4,5};
    Node* head  = ArraytoLL(arr);
    // head = KthelementDelete(head, 6);
    head = RemoveElement(head, 2);
    print(head);
    
    return 0;
}
